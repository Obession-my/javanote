a.java 线程篇
	（1）用Runnable还是Thread？
		Java不支持类的多继承但是支持接口的多重实现，所以Runnable更好一点

	（2） Thread 类中的start() 和 run() 方法有什么区别？
		start()方法被用来启动新创建的线程，内部调用了run()方法，这和直接调用run()方法的效果不一样
		当你调用run()方法的时候，只会是在原来的线程中调用，没有新的线程启 动，start()方法才会启动新线程。
	
	（3）Java中Runnable和Callable有什么不同？
		Runnable和Callable都代表那些要在不同的线程中执行的任务，它们的主要区别是Callable的 call() 方法可以返回值和抛出异常，
		而Runnable的run()方法没有这些功能。Callable可以返回装载有计算结果的Future对象。
	
	（4）Java中的volatile 变量是什么？
		volatile是一个特殊的修饰符，只有成员变量才能使用它，volatile变量可以保证下一个读取操作会在前一个写操作之后发生.
	
	（5）Java中如何停止一个线程？
		Java提供了很丰富的API但没有为停止线程提供API。JDK 1.0本来有一些像stop(), suspend() 和 resume()的控制方法但是由于
		潜在的死锁威胁因此在后续的JDK版本中他们被弃用了，之后Java API的设计者就没有提供一个兼容且线程安全的方法来停止一个线程。
		当run() 或者 call() 方法执行完的时候线程会自动结束,如果要手动结束一个线程，你可以用volatile 布尔变量来退出run()方法的
		循环或者是取消任务来中断线程.
	
	（6）一个线程运行时发生异常会怎样？
		Thread.UncaughtExceptionHandler是用于处理未捕获异常造成线程突然中断情况的一个内嵌接口。当一个未捕获异常将造成线程中
		断的时候JVM会使用Thread.getUncaughtExceptionHandler()来 查询线程的UncaughtExceptionHandler并将线程和异常作为参数传
		递给handler的uncaughtException()方法 进行处理。
	
	（7）如何在两个线程间共享数据？
		你可以通过共享对象来实现这个目的，或者是使用像阻塞队列这样并发的数据结构。
	
	（8）Java中notify 和 notifyAll有什么区别？
		notify()方法不能唤醒某个具体的线程，所以只有一个线程在等 待的时候它才有用武之地。而notifyAll()唤醒所有线程并允许他们争夺
		锁确保了至少有一个线程能继续运行。
	
	（9）Java中堆和栈有什么不同？
		每个线程都有自己的栈内存，用于存储本地变量，方法参数和栈调用，一个线程中存储的变量对其它线程是不可见的。而堆是所有线程共享
		的一片公用内存区域。对象都在堆里创建，为了提升效率线程会从堆中弄一个缓存到自己 的栈，如果多个线程使用该变量就可能引发问题，
		这时volatile 变量就可以发挥作用了，它要求线程从主存中读取变量的值。
	
	（10）如何避免死锁？
		《1》互斥条件：一个资源每次只能被一个进程使用。
	
		《2》请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。
	
		《3》不剥夺条件：进程已获得的资源，在末使用完之前，不能强行剥夺。
	
		《4》循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。
		避免死锁最简单的方法就是阻止循环等待条件，将系统中所有的资源设置标志位、排序，规定所有的进程申请资源必须以一定的顺序
		（升序或降序）做操作来避免死锁。
	
	（11） JVM中哪个参数是用来控制线程的栈堆栈小的？
		-Xss参数用来控制线程的堆栈大小。
	
	（12） Java多线程中调用wait() 和 sleep()方法有什么不同？
		Java程序中wait 和 sleep都会造成某种形式的暂停，它们可以满足不同的需要。wait()方法用于线程间通信，如果等待条件为真
		且其它线程被唤醒时它会释放锁，而 sleep()方法仅仅释放CPU资源或者让当前线程停止执行一段时间，但不会释放锁。


2.Java IO 面试题

	（1）字节流和字符流哪个好？怎么选择？
		缓大多数情况下使用字节流会更好，因为字节流是字符流的包装，而大多数时候 IO 操作都是直接操作磁盘文件，所以这些流在传输时都是以字节的方式进行的（图片等都是按字节存储的）
		如果对于操作需要通过 IO 在内存中频繁处理字符串的情况使用字符流会好些，因为字符流具备缓冲区，提高了性能
	
	（2）字符流和字节流有什么区别？
		字符流和字节流的使用非常相似，但是实际上字节流的操作不会经过缓冲区（内存）而是直接操作文本本身的，而字符流的操作会先经过缓冲区
		（内存）然后通过缓冲区再操作文件
	
	（3） 什么是Java序列化，如何实现Java序列化？
		序列化就是一种用来处理对象流的机制，将对象的内容进行流化。可以对流化后的对象进行读写操作，可以将流化后的对象传输于网络之间。序列化是为了解决在对象流读写操作时所引发的问题.
		序列化的实现：将需要被序列化的类实现Serialize接口，没有需要实现的方法，此接口只是为了标注对象可被序列化的，然后使用一个输出流（如：FileOutputStream）来构造一个
		ObjectOutputStream(对象流)对象，再使用ObjectOutputStream对象的write(Object obj)方法就可以将参数obj的对象写出
	
	（4）PrintStream、BufferedWriter、PrintWriter的比较?
		PrintStream类的输出功能非常强大，通常如果需要输出文本内容，都应该将输出流包装成PrintStream后进行输出。PrintStream 永远不会抛出 IOException；
		但是可以checkError 方法测试的内部标志。而且PrintStream自动刷新
		BufferedWriter:将文本写入字符输出流，缓冲各个字符从而提供单个字符，数组和字符串的高效写入.通过write()方法将获取道德字符输出。必须调用flush()才能刷新出去。只能操作字符流
		PrintWriter的println方法自动添加换行，不会抛异常，若关心异常，需要调用checkError方法看是否有异常发生，PrintWriter构造方法可指定参数，实现自动刷新缓存（autoflush）

3.Java 集合面试题
	
	（1）说说常见的集合有哪些吧？
		Map接口和Collection接口是所有集合框架的父接口：
		Collection接口的子接口包括：Set接口和List接口
		Map接口的实现类主要有：HashMap、TreeMap、Hashtable、ConcurrentHashMap以及Properties等
		Set接口的实现类主要有：HashSet、TreeSet、LinkedHashSet等
		List接口的实现类主要有：ArrayList、LinkedList、Stack以及Vector等
		详细：
			ArrayList：由动态数组实现，有序，可重复，不适合频繁的对元素的插入和删除，异步
			linkedList: 由双链表实现，对元素的增，删效果比较好，缺点就是遍历效率低。
			HashMap:由数组和链表实现，允许key和value为null，异步，元素无序
			list和set的区别：list有序不唯一，set无序唯一。
	
	（2）HashMap与HashTable的区别？
		HashMap没有考虑同步，是线程不安全的；Hashtable使用了synchronized关键字，是线程安全的；
		HashMap允许K/V都为null；后者K/V都不允许为null；
		hashMap继承自AbstractMap类；而Hashtable继承自Dictionary类；
	
	（3）为什么HashMap中String、Integer这样的包装类适合作为K？如果我想要让自己的Object作为K应该怎么办呢？
		都是final类型，即不可变性，保证key的不可更改性，不会存在获取hash值不同的情况
		内部已重写了equals()、hashCode()等方法，遵守了HashMap内部的规范（不清楚可以去上面看看putValue的过程），不容易出现Hash值计算错误的情况；
	
		重写hashCode()和equals()方法

4.Java 类加载器
	（1）虚拟机类加载
		虚拟机把描述类的数据从class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的java类型，这就是虚拟机的类加载机制。
		
	（2）JVM原理
		JVM是Java核心和基础，在Java编译器和os平台之间的虚拟处理器。他可以在上面执行Java的字节码程序。Java编译器只要面向JVM，生成JVM能理解的代码或字
		节码文件。Java源文件经编译成字节码程序，通过JVM将每一条指令翻译成不同平台的机器码，通过特定平台运行。
5.Java动态代理
	（1）定义一个接口，定义抽象方法，声明一个类，实现这个接口，实现这个方法，再定义一个类也实现这个接口并且实现这个方法在这个类中我们声明一个

6.Java的动态编译
	（1）通过runtime调用javac，启动新的进程去操作

　　	（2）Runtime run = Runtime.getRuntime();
	　　 Process process = run.exec("javac -cp d:/myjava/Hello.java");
7.Spring常用注解
	（1）声明bean的注解
	@Component 组件，没有明确的角色
	@Service在业务逻辑层使用（service层）
	@Controller在展现层使用，控制器的声明（C）
	(2)注入bean的注解
	@Autowired：由Spring提供
	@Resource：由JSR-250提供
	（3）java配置类注解
	@Configuration 声明当前类为配置类，其中内部组合了@Component注解，表明这个类是一个bean（类上）
	@Bean 注解在方法上，声明当前方法的返回值为一个bean，替代xml中的方式
	@ComponentScan 
	（4）切面的相关注解
	@Aspect 声明一个切面（类上）
	使用@After、@Before、@Around定义建言（advice），可直接将拦截规则（切点）作为参数。
	（5）对事务的支持
	@EnableTransactionManagement 开启注解式事务的支持
8.Spring boot 注解
	@ServletComponentScan：Servlet、Filter、Listener 可以直接通过 @WebServlet、@WebFilter、@WebListener 注解自动注册
	@MapperScan:spring-boot支持mybatis组件的一个注解
	@Controller


java 基础
1.<%%>与<%!%>区别？<%# %>和<%= %>
	<%!%>定义的是类变量
	<%%> 定义的局部变量
	<%= %> 用来绑定后台的有返回值方法和变量
	<%# %> 用于数据绑定
	<%@ %> 导入后台命名空间
	<%$ %> 用来绑定web.config里面的字符串
2.一个.java 文件中可以有多个类吗？
	可以有多个类，但是只能有一个被public修饰的类，而且被public修饰的类的类名必须和文件名相同。
3.为什么没有被private和protected修饰的类呢？
	private ，protected只会修饰方法，属性名和内部类
4.java如何获取字符串编码格式？
	伪代码：
		String encode = "utf-8";
		if(str.equals(new String (str.getBatys(encode),encode))){
			return encode;
		}
5.java中String、StringBuffer和StringBuilder的区别？
	共同之处：
		都被final修饰了，不允许继承主要就是考虑其中的参数被其他参数修改影响到其他应用
	不同之处：
		StringBuffer:线程安全，不需要额外的同步用于多线程中
		StringBuilder:线程不安全，多线程调用就需要同步处理，但是速度是三者中最快的
		String：实现了三个接口，Serializable,comperable<String>,CarSequence;StringBuilder实现了两个，serializable,CarSequence接口
		运行速度：StringBuilder>StringBuffer>String
		因为String创建的是一个常量，每次的改变都将重新创建，将老的字符串赋值给新的字符串，老的string就回被GC回收，StringBuilder和StringBuffer都是创建的变量，对其进行操作都是
		直接进行修改。
	总结：
		String 适用于少量的字符串操作
		StringBuilder:适用与单线程下在缓冲区进行字符串大量操作的情况下
		StringBuffer：适用与多线程下在缓冲区进行字符串大量操作的情况下
6.页面间传值的几中方式
	（1）重定向
	（2）转发
	（3）通过session
	 (4) 通过application
	 (5) cookie
7.cookie与session区别，如何使用
	cookie:浏览器的http请求是无状态的，当登陆后服务器会返回一些数据给浏览器，然后保存在本地（cookie），当用户再次发送请求就回携带一些数据。cookie的存储数据一般不能超过4K.cookie是存在客户端
	session：和cookie有点像都是为了存储用户的相关信息。但是session是存储在服务器中的。
	两者结合使用：
		1.session，存放session用户信息，cookie存放session_id,每次请求携带cookie就可以知道用户信息。
		2.将session信息加密存放在cookie中。	
8.hashCode()和equals()区别
	这两个方法都是Object里面的方法
	equals：两个变量只要不是同一个对象就会返回false
			在重写时：
			（1）自反性：x.equals(x)必须返回true。
			（2）对称性：x.equals(y)与y.equals(x)的返回值必须相等。
			（3）传递性：x.equals(y)为true，y.equals(z)也为true，那么x.equals(z)必须为true。
			（4）一致性：如果对象x和y在equals()中使用的信息都没有改变，那么x.equals(y)值始终不变。
			（5）非null：x不是null，y为null，则x.equals(y)必须为false。
	hashCode:是一个native方法，返回值是一个int值，是将对象在内存中的地址返回
			在重写时：
			（1）hashCode()在哈希表中起作用，如java.util.HashMap。
			（2）如果对象在equals()中使用的信息都没有改变，那么hashCode()值始终不变。
			（3）如果两个对象使用equals()方法判断为相等，则hashCode()方法也应该相等。
			（4）如果两个对象使用equals()方法判断为不相等，则不要求hashCode()也必须不相等；但是开发人员应该认识到，不相等的对象产生不相同的hashCode可以提高哈希表的性能。
9.==和equals区别？
	==:比较的两个变量在内存中的数值是否相同，基本数据类型和两个引用变量是否相等
	equals:比较的是3两个独立对象的内容是否相等，比较的两个对象是独立的，如果一个类咩用重写equals那equals比较和==比较是一样的。
10.redirect（重定向）和forward（转发）区别
	redirect:实际上是请求两次，服务器在响应第一次请求的时候会让浏览器向另外一个URL发送请求，从而达到转发目的（浏览器地址显示被请求的 url）
	forward：浏览器只向服务器发送一个请求，有第二个资源响应，再请求资源Request中保存的对象，对每个信息资源都是共享的。（浏览器地址不显示被请求的 url）
	！！！重定向可以跳转任何路径，而请求转发只能跳转自己项目内的路径。
11.在servlet里面实现页面跳转的几种方式，简单说明
	（1）重定向{response.sendRedirect(“next.html”);}
	（2）转发{request.getRequestDispatcher(“next.html”).forward(request,response);}
	（3）设置状态码，设置头{response.setStatus(302);response.setHeader(“Location”,”next.html”);}
12.借助jstl链接数据库查询
	<sql:setDataSource 
		driver="com.mysql.jdbc.Driver" 
　　　　 url="jdbc:mysql:///student?useUnicode=true&characterEncoding=utf-8" 
　　　　 user="root"  
　　　　 password="123" 
		/>
	<sql:query var="res" dataSource ="${db}">
		select* from user
	</sql:query>
13.javaScript ajax请求
	new Ajax.resqust("URL"){
		methods:'get'
		onSuccess:function(transport){

		}
		onFailure:function(){
	
		}
	}
14.操作document的方法
	document.getElementById();  
    document.getElementsByTagName();
    document.getELementsByClassName();
15.jsp九大内置对象和四大作用域
	九大内置对象：
		out,request,response,exception,page,session,application,pageContext,config
	四大作用域：
		page:只在一个页面中保留数据
		request:在一次请求中保留数据
		session:在一次会话中保留数据
		application:整个服务器中保留数据，全部用户共享
16.Spring MVC执行流程
	用户请求DispatcherServlet,根据url解析得到uri,
	调用HanderMapping根据请求得到得到hander对象，
	handlerExcution将解析后的信息传递给DispatcherServlet,
	DispatcherServlet根据得到的信息查找handlerAdapter(处理器适配器)，按照特定的规则执行Handler
	Handler让具体的Controller执行，
	Controller将ModalAndView返回给handlerAdapter,
	HandLerAdapter将解析ModalAndView返回给DispatcherServlet，
	DispatcherServlet调用视图解析器渲染。

17.MongoDB面试题
	什么是MongoDB?
		MongoDB是一个文档数据库，提供好的性能，领先的非关系型数据库。采用BSON存储文档数据。
		BSON（）是一种类json的一种二进制形式的存储格式，简称Binary JSON.
		相对于json多了date类型和二进制数组。
	MongoDB有什么有点？
		面向文档的存储：以 JSON 格式的文档保存数据。
		任何属性都可以建立索引
		复制以及高可扩展性
		自动分片
		丰富的查询功能
		快速的即时更新
	在哪些场景使用MongoDB
		大数据
		内容管理系统
		移动端Apps
		数据管理
	mongodb中得分片
		分片是将数据水平分到不同得物理节点当应用得数据越来越大时数据量也会越来越大。当数据量增长时，单台机器有可能无法存储数据或可接受的读取写入吞吐量。
		利用分片技术可以添加更多的机器来应对数据量增加以及读写操作的要求。
	mongodb 支持主键外键关系吗？
		默认MongoDB不支持主键和外键关系。 用Mongodb本身的API需要硬编码才能实现外键关联，不够直观且难度较大。
	MongoDB支持哪些数据类型？
		String，
		Integer,
		Double,
		Boolean,
		Object,
		Obgect ID,存储文档ID
		Arrays,
		MAX/Min Keys,
		DateTime,
		Code,在文档中存储JavaScript
		Regular Expression，存储正则表达式
	Object ID有哪些部分组成？
		一共有四部分组成:时间戳、客户端ID、客户进程ID、三个字节的增量计数器
	什么是MonGoDB的索引？
		索引用于高效的执行查询,没有索引的MongoDB将扫描整个集合中的所有文档,这种扫描效率很低,需要处理大量
		的数据.
    	索引是一种特殊的数据结构,将一小块数据集合保存为容易遍历的形式.索引能够存储某种特殊字段或字段集的
		值,并按照索引指定的方式将字段值进行排序.






java 工程师
	Spring:
		1.IOC
		2.AOP
		3.Bean
		4.事务管理
	Spring MVC：
		1.常用注解
		2.配置文件
		3.拦截器
		4.异常处理
	SpringBoot:
		1.SpringBoot常用注解
		2.三大特性
		3.常见配置
	MyBatis:
		1.常用标签
		2.拦截器
		3.参数传递
		4.多变管理
		5.多表关联查询

​	